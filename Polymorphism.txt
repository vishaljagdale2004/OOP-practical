// Base class Publication
class Publication {
    String title;
    double price;
    int copies;

    public Publication(String title, double price, int copies) {
        this.title = title;
        this.price = price;
        this.copies = copies;
    }

    public double calculateSale() {
        return price * copies;
    }
}

// Derived class Book
class Book extends Publication {
    String author;
    int orderCopies;

    public Book(String title, double price, int copies, String author, int orderCopies) {
        super(title, price, copies);
        this.author = author;
        this.orderCopies = orderCopies;
    }

    public int getOrderCopies() {
        return orderCopies;
    }
}

// Derived class Magazine
class Magazine extends Publication {
    int orderQty;
    String currentIssue;

    public Magazine(String title, double price, int copies, int orderQty, String currentIssue) {
        super(title, price, copies);
        this.orderQty = orderQty;
        this.currentIssue = currentIssue;
    }

    public int getOrderQty() {
        return orderQty;
    }
}

public class PublicationDemo {

    public static void main(String[] args) {
        // Creating instances of Book and Magazine
        Book book1 = new Book("The Java Programming Language", 29.99, 100, "James Gosling", 50);
        Book book2 = new Book("Clean Code: A Handbook of Agile Software Craftsmanship", 39.99, 150, "Robert C. Martin", 75);

        Magazine magazine1 = new Magazine("Java Magazine", 5.99, 200, 1000, "Issue 2023/01");
        Magazine magazine2 = new Magazine("National Geographic", 7.99, 300, 800, "March 2023");

        // Displaying order information for books
        System.out.println("Book Orders:");
        displayOrderInfo(book1);
        displayOrderInfo(book2);

        // Displaying order information for magazines
        System.out.println("\nMagazine Orders:");
        displayOrderInfo(magazine1);
        displayOrderInfo(magazine2);

        // Calculating and displaying total sale of publications
        double totalSale = calculateTotalSale(book1, book2, magazine1, magazine2);
        System.out.println("\nTotal Sale of Publications: $" + totalSale);
    }

    // Helper method to display order information for books and magazines
    public static void displayOrderInfo(Publication publication) {
        if (publication instanceof Book) {
            Book book = (Book) publication;
            System.out.println("Book: " + book.title + ", Author: " + book.author + ", Ordered Copies: " + book.getOrderCopies());
        } else if (publication instanceof Magazine) {
            Magazine magazine = (Magazine) publication;
            System.out.println("Magazine: " + magazine.title + ", Current Issue: " + magazine.currentIssue + ", Order Quantity: " + magazine.getOrderQty());
        }
    }

    // Helper method to calculate total sale of publications
    public static double calculateTotalSale(Publication... publications) {
        double totalSale = 0.0;
        for (Publication publication : publications) {
            totalSale += publication.calculateSale();
        }
        return totalSale;
    }
}
